import java.util.*;

class HospitalManagementSystem {

    static class Patient {
        String id, name, address;
        int age;
        String medicalHistory;

        public Patient(String id, String name, int age, String address, String medicalHistory) {
            this.id = id;
            this.name = name;
            this.age = age;
            this.address = address;
            this.medicalHistory = medicalHistory;
        }

        @Override
        public String toString() {
            return "Patient[ID: " + id + ", Name: " + name + ", Age: " + age + ", Address: " + address + ", Medical History: " + medicalHistory + "]";
        }
    }

    static class Appointment {
        String appointmentId, patientId, doctorName, date, time;

        public Appointment(String appointmentId, String patientId, String doctorName, String date, String time) {
            this.appointmentId = appointmentId;
            this.patientId = patientId;
            this.doctorName = doctorName;
            this.date = date;
            this.time = time;
        }

        @Override
        public String toString() {
            return "Appointment[ID: " + appointmentId + ", Patient ID: " + patientId + ", Doctor: " + doctorName + ", Date: " + date + ", Time: " + time + "]";
        }
    }

    static class Invoice {
        String invoiceId, patientId;
        double amount;

        public Invoice(String invoiceId, String patientId, double amount) {
            this.invoiceId = invoiceId;
            this.patientId = patientId;
            this.amount = amount;
        }

        @Override
        public String toString() {
            return "Invoice[ID: " + invoiceId + ", Patient ID: " + patientId + ", Amount: $" + amount + "]";
        }
    }

    static class Inventory {
        String itemId, itemName;
        int quantity;

        public Inventory(String itemId, String itemName, int quantity) {
            this.itemId = itemId;
            this.itemName = itemName;
            this.quantity = quantity;
        }

        @Override
        public String toString() {
            return "Inventory[Item ID: " + itemId + ", Item Name: " + itemName + ", Quantity: " + quantity + "]";
        }
    }

    static class Staff {
        String staffId, name, role;

        public Staff(String staffId, String name, String role) {
            this.staffId = staffId;
            this.name = name;
            this.role = role;
        }

        @Override
        public String toString() {
            return "Staff[ID: " + staffId + ", Name: " + name + ", Role: " + role + "]";
        }
    }

    static Map<String, Patient> patients = new HashMap<>();
    static Map<String, Appointment> appointments = new HashMap<>();
    static Map<String, Invoice> invoices = new HashMap<>();
    static Map<String, Inventory> inventories = new HashMap<>();
    static Map<String, Staff> staffs = new HashMap<>();

    public static void main(String[] args) {
        // Sample data for testing
        patients.put("P001", new Patient("P001", "John Doe", 30, "123 Main St", "None"));
        appointments.put("A001", new Appointment("A001", "P001", "Dr. Smith", "2024-06-25", "10:00 AM"));
        invoices.put("I001", new Invoice("I001", "P001", 250.00));
        inventories.put("IT001", new Inventory("IT001", "Bandages", 100));
        staffs.put("S001", new Staff("S001", "Alice", "Nurse"));

        Scanner sc = new Scanner(System.in);

        while (true) {
            System.out.println("Hospital Management System");
            System.out.println("1. Register Patient");
            System.out.println("2. Schedule Appointment");
            System.out.println("3. View Electronic Health Records (EHR)");
            System.out.println("4. Generate Invoice");
            System.out.println("5. Manage Inventory");
            System.out.println("6. Manage Staff");
            System.out.println("7. Exit");
            System.out.print("Choose an option: ");

            int option = sc.nextInt();
            sc.nextLine(); // consume newline

            switch (option) {
                case 1:
                    System.out.print("Enter Patient ID: ");
                    String patientId = sc.nextLine();
                    System.out.print("Enter Name: ");
                    String name = sc.nextLine();
                    System.out.print("Enter Age: ");
                    int age = sc.nextInt();
                    sc.nextLine(); // consume newline
                    System.out.print("Enter Address: ");
                    String address = sc.nextLine();
                    System.out.print("Enter Medical History: ");
                    String medicalHistory = sc.nextLine();
                    patients.put(patientId, new Patient(patientId, name, age, address, medicalHistory));
                    System.out.println("Patient registered successfully.");
                    break;
                case 2:
                    System.out.print("Enter Appointment ID: ");
                    String appointmentId = sc.nextLine();
                    System.out.print("Enter Patient ID: ");
                    patientId = sc.nextLine();
                    System.out.print("Enter Doctor Name: ");
                    String doctorName = sc.nextLine();
                    System.out.print("Enter Date (YYYY-MM-DD): ");
                    String date = sc.nextLine();
                    System.out.print("Enter Time (HH:MM AM/PM): ");
                    String time = sc.nextLine();
                    appointments.put(appointmentId, new Appointment(appointmentId, patientId, doctorName, date, time));
                    System.out.println("Appointment scheduled successfully.");
                    break;
                case 3:
                    System.out.print("Enter Patient ID: ");
                    patientId = sc.nextLine();
                    Patient patient = patients.get(patientId);
                    if (patient != null) {
                        System.out.println(patient);
                    } else {
                        System.out.println("Patient not found.");
                    }
                    break;
                case 4:
                    System.out.print("Enter Invoice ID: ");
                    String invoiceId = sc.nextLine();
                    System.out.print("Enter Patient ID: ");
                    patientId = sc.nextLine();
                    System.out.print("Enter Amount: ");
                    double amount = sc.nextDouble();
                    sc.nextLine(); // consume newline
                    invoices.put(invoiceId, new Invoice(invoiceId, patientId, amount));
                    System.out.println("Invoice generated successfully.");
                    break;
                case 5:
                    System.out.print("Enter Item ID: ");
                    String itemId = sc.nextLine();
                    System.out.print("Enter Item Name: ");
                    String itemName = sc.nextLine();
                    System.out.print("Enter Quantity: ");
                    int quantity = sc.nextInt();
                    sc.nextLine(); // consume newline
                    inventories.put(itemId, new Inventory(itemId, itemName, quantity));
                    System.out.println("Inventory updated successfully.");
                    break;
                case 6:
                    System.out.print("Enter Staff ID: ");
                    String staffId = sc.nextLine();
                    System.out.print("Enter Name: ");
                    name = sc.nextLine();
                    System.out.print("Enter Role: ");
                    String role = sc.nextLine();
                    staffs.put(staffId, new Staff(staffId, name, role));
                    System.out.println("Staff added successfully.");
                    break;
                case 7:
                    System.out.println("Exiting...");
                    sc.close();
                    return;
                default:
                    System.out.println("Invalid option. Please try again.");
            }
        }
    }
}
